; -*- mode: clojure; -*-

(require '[clojure.java.classpath :as cp]
         '[clojure.java.shell :refer [sh]]
         '[clojure.java.io :as io]
         '[clojure.tools.logging :as log]
         '[clojure.string :as str])

(logging/init {:file "riemann.log"})

(import 'clojure.lang.DynamicClassLoader)

(let [class-loader (.get Compiler/LOADER)
      project-classpath (str/split (:out (sh "printenv" "CLASSPATH")) #":")]
  (doseq [url (map (comp io/as-url io/as-file) project-classpath)]
    (.addURL class-loader url)))

(require '[riemann.query :as q]
         '[blackout.core :as b])

(log/info (cp/classpath))

(let [host "127.0.0.1"]
  (tcp-server {:host host})
  (udp-server {:host host})
  (ws-server  {:host host})
  (repl-server))

(periodically-expire 5)

(let [index (index)]
  (streams
    (default :ttl 60
      index
      (expired
        (fn [event] (info "expired" event))))))
