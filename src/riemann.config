; -*- mode: clojure; -*-

(require '[clojure.java.classpath :as cp]
         '[clojure.java.shell :refer [sh]]
         '[clojure.java.io :as io]
         '[clojure.tools.logging :as log]
         '[clojure.string :as str])

(import 'clojure.lang.DynamicClassLoader
        '(java.net URL URLClassLoader))

(logging/init {:file "riemann.log"})

(defn dynamic-class-loader?
  [x]
  (instance? DynamicClassLoader x))

(defn current-class-loader
  []
  (let [ctx-class-loader (.getContextClassLoader (Thread/currentThread))]
    (->> (iterate #(.getParent %) ctx-class-loader)
      (take-while (complement nil?))
      (filter dynamic-class-loader?)
      first)))

(defn add-classpath-url
  [url]
  (.addURL (current-class-loader) url))

(let [project-classpath (str/split (:out (sh "printenv" "CLASSPATH")) #":")
      class-loader (current-class-loader)]
  (doseq [url (map (comp io/as-url io/as-file) project-classpath)]
    (add-classpath-url url))
  (load-file "blackout/core.clj"))

(require '[riemann.query :as q])

(let [host "127.0.0.1"]
  (tcp-server {:host host})
  (udp-server {:host host})
  (ws-server  {:host host})
  (repl-server))

(periodically-expire 5)

(let [index (index)]
  (streams
    (default :ttl 60
      index
      (expired
        (fn [event] (info "expired" event))))))
