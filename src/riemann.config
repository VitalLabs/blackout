; -*- mode: clojure; -*-

(require '[clojure.java.classpath :as cp]
         '[clojure.java.shell :refer [sh]]
         '[clojure.java.io :as io]
         '[clojure.tools.logging :as log]
         '[clojure.string :as str])

(import 'clojure.lang.DynamicClassLoader
        'java.net.URL
        'java.net.URLClassLoader)

(logging/init {:file "riemann.log"})

(defn dynamic-class-loader?
  [x]
  (instance? DynamicClassLoader x))

(defn url-class-loader?
  [x]
  (instance? URLClassLoader x))

(defn modifiable-class-loader?
  [x]
  (or (instance? DynamicClassLoader x)
      (instance? URLClassLoader x)))

(defn current-class-loader
  []
  (let [ctx-class-loader (.getContextClassLoader (Thread/currentThread))]
    (->> (iterate #(.getParent %) ctx-class-loader)
      (take-while (complement nil?))
      (filter modifiable-class-loader?)
      first)))

(defn add-classpath-url
  [url]
  (let [class-loader (current-class-loader)]
    (if (dynamic-class-loader? class-loader)
      (.addURL (current-class-loader) url)
      (-> URLClassLoader
        (.getDeclaredMethod "addURL" (into-array Class [URL]))
        (doto (.setAccessible true))
        (.invoke class-loader (into-array URL [url]))))))

(let [project-classpath (str/split (:out (sh "printenv" "CLASSPATH")) #":")]
  (doseq [url (map (comp io/as-url io/as-file) project-classpath)]
    (add-classpath-url url)))

(require '[riemann.query :as q])

(let [host "127.0.0.1"]
  (tcp-server {:host host})
  (udp-server {:host host})
  (ws-server  {:host host})
  (repl-server))

(periodically-expire 5)

(let [index (index)]
  (streams
   (default :ttl 60
     index
     (expired
      (fn [event] (info "expired" event))))))
